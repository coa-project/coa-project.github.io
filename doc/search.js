window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pycoa.coa", "modulename": "pycoa.coa", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19", "modulename": "pycoa.coa.covid19", "kind": "module", "doc": "<p>Project : PyCoA\nDate :    april 2020 - november 2023\nAuthors : Olivier Dadoun, Julien Browaeys, Tristan Beau\nCopyright \u00a9pycoa.fr\nLicense: See joint LICENSE file</p>\n\n<p>Module : coa.covid19</p>\n\n<h2 id=\"about\">About :</h2>\n\n<p>Main class definitions for covid19 dataset access. Currently, we are only using the JHU CSSE data.\nThe parser class gives a simplier access through an already filled dict of data</p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase", "modulename": "pycoa.coa.covid19", "qualname": "DataBase", "kind": "class", "doc": "<p>DataBase class\nParse a Covid-19 database and filled the pandas python objet : mainpandas\nIt takes a string argument, which can be: 'jhu','spf', 'spfnational','owid', 'opencovid19' and 'opencovid19national'</p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.__init__", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.__init__", "kind": "function", "doc": "<p>Fill the pandas_datase</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_name</span></span>)</span>"}, {"fullname": "pycoa.coa.covid19.DataBase.database_type", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.database_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.available_options", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.available_options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.db", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.db", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.dbfullinfo", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.dbfullinfo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.slocation", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.slocation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.geo", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.geo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.db_world", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.db_world", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.covid19.DataBase.factory", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.factory", "kind": "function", "doc": "<p>Return an instance to DataBase and to CocoDisplay methods\nThis is recommended to avoid mismatch in labeled figures</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_name</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.setgeo", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.setgeo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">geo</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.getgeo", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.getgeo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.get_parserdb", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.get_parserdb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.get_fulldb", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.get_fulldb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.set_display", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.set_display", "kind": "function", "doc": "<p>Set the CocoDisplay</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span>, </span><span class=\"param\"><span class=\"n\">geo</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.get_display", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.get_display", "kind": "function", "doc": "<p>Return the instance of CocoDisplay initialized by factory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.get_available_database", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.get_available_database", "kind": "function", "doc": "<p>Return all the available Covid19 database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.get_stats", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.get_stats", "kind": "function", "doc": "<p>Return the pandas pandas_datase</p>\n\n<ul>\n<li>index: only an incremental value</li>\n<li>location: list of location used in the database selected (using geo standardization)</li>\n<li>'which' :  return the keyword values selected from the avalailable keywords keepted seems\nself.dbfullinfo.get_available_keywords()</li>\n</ul>\n\n<ul>\n<li>'option' :default none\n<ul>\n<li>'nonneg' In some cases negatives values can appeared due to a database updated, nonneg option\nwill smooth the curve during all the period considered</li>\n<li>'nofillnan' if you do not want that NaN values are filled, which is the default behaviour</li>\n<li>'smooth7' moving average, window of 7 days</li>\n<li>'sumall' sum data over all locations</li>\n</ul></li>\n</ul>\n\n<p>keys are keyswords from the selected database\n        location        | date      | keywords          |  daily            |  weekly\n        -----------------------------------------------------------------------\n        location1       |    1      |  val1-1           |  daily1-1          |  diff1-1\n        location1       |    2      |  val1-2           |  daily1-2          |  diff1-2\n        location1       |    3      |  val1-3           |  daily1-3          |  diff1-3\n            ...             ...                     ...\n        location1       | last-date |  val1-lastdate    |  cumul1-lastdate   |   diff1-lastdate\n            ...\n        location-i      |    1      |  vali-1           |  dailyi-1          |  diffi-1\n        location-i      |    2      |  vali-1           |  daily1i-2         |  diffi-2\n        location-i      |    3      |  vali-1           |  daily1i-3         |  diffi-3\n            ...</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.merger", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.merger", "kind": "function", "doc": "<p>Merge two or more pycoa pandas from get_stats operation\n'coapandas': list (min 2D) of pandas from stats</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.saveoutput", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.saveoutput", "kind": "function", "doc": "<p>saveoutput pycoas pandas as an  output file selected by output argument\n'pandas': pycoa pandas\n'saveformat': excel or csv (default excel)\n'savename': pycoaout (default)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.smooth_cases", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.smooth_cases", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cases</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.covid19.DataBase.get_posteriors", "modulename": "pycoa.coa.covid19", "qualname": "DataBase.get_posteriors", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sr</span>, </span><span class=\"param\"><span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">7</span>, </span><span class=\"param\"><span class=\"n\">min_periods</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser", "modulename": "pycoa.coa.dbparser", "kind": "module", "doc": "<p>Project : PyCoA - Copyright \u00a9pycoa.fr\nDate :    april 2020 - november 2023\nAuthors : Olivier Dadoun, Julien Browaeys, Tristan Beau\nLicense: See joint LICENSE file\nModule : report</p>\n\n<h2 id=\"aboutselfdb_world\">Aboutself.db_world</h2>\n\n<p>This is the PyCoA rapport module it gives all available information concerning a database key words</p>\n"}, {"fullname": "pycoa.coa.dbparser.DBInfo", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.dbparser.DBInfo.__init__", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.__init__", "kind": "function", "doc": "<p>For a specific database (call namedb), returns information on the epidemiological variables.\nThose informations are used later on in covid19.py.\nIt returns a dictionnary with:\n    * key: epidemiological variable\n    * values:\n        - new variable name for pycoa purpose, if needed. By default is an empty string ''\n        - desciption of the variable. By default is an empty string '' but it is highly recommended to describe the variable\n        - url of the csv where the epidemiological variable is\n        - url of the master i.e where some general description could be located. By default is an empty string ''</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">namedb</span></span>)</span>"}, {"fullname": "pycoa.coa.dbparser.DBInfo.dbparsed", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.dbparsed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.dbparser.DBInfo.separator", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.separator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.dbparser.DBInfo.db", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.db", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.dbparser.DBInfo.db_world", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.db_world", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_echoinfo", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_echoinfo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_parsing", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_parsing", "kind": "function", "doc": "<p>Parse the DB selected\nWhen available total deaths should be the first epidemiological variable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">namedb</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_dblistdico", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_dblistdico", "kind": "function", "doc": "<p>Return info concerning the db selected, i.e key, return iso code, granularity,name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_db", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_db", "kind": "function", "doc": "<p>Return the current covid19 database selected. See get_available_database() for full list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_geo", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_geo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_world_boolean", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_world_boolean", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_original_keywords", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_original_keywords", "kind": "function", "doc": "<p>Return all the original keyswords for the database selected\noriginal keyswords have been renamed into available_keywords</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_locations", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_locations", "kind": "function", "doc": "<p>Return available location countries / regions in the current database\nUsing the geo method standardization</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_dates", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_dates", "kind": "function", "doc": "<p>Return all dates available in the current database as datetime format</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_available_keywords", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_available_keywords", "kind": "function", "doc": "<p>Return all the available keyswords for the database selected</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_url", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_url", "kind": "function", "doc": "<p>Return all the url which have been parsed for the database selected</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_keyword_definition", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_keyword_definition", "kind": "function", "doc": "<p>Return available keywords (originally named original keywords) definition</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">which</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_keyword_url", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_keyword_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">which</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_dbdescription", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_dbdescription", "kind": "function", "doc": "<p>Return available information concerning the db selected</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_url_original_keywords", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_url_original_keywords", "kind": "function", "doc": "<p>Return dico with keys=url and values=[original keywords]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.original_to_available_keywords_dico", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.original_to_available_keywords_dico", "kind": "function", "doc": "<p>Return dico with keys=original keywords and values=available keywords\nused to rename the variable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_url_separator", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_url_separator", "kind": "function", "doc": "<p>Return dico with keys=url and values=';' or ','\ndefault is ';'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.column_where_csv_parser", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.column_where_csv_parser", "kind": "function", "doc": "<p>For center for Systems Science and Engineering (CSSE) at Johns Hopkins University\nCOVID-19 Data Repository by the see homepage: <a href=\"https://github.com/CSSEGISandData/COVID-19\">https://github.com/CSSEGISandData/COVID-19</a>\nreturn a structure : pandas where - date - keywords\nfor jhu where are countries (where uses geo standard)\nfor jhu-usa where are Province_State (where uses geo standard)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">db</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.row_where_csv_parser", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.row_where_csv_parser", "kind": "function", "doc": "<p>Parse and convert the database cvs file to a pandas structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.restructured_pandas", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.restructured_pandas", "kind": "function", "doc": "<p>Return the mainpandas core of the PyCoA structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mypandas</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.dbparser.DBInfo.get_mainpandas", "modulename": "pycoa.coa.dbparser", "qualname": "DBInfo.get_mainpandas", "kind": "function", "doc": "<ul>\n<li>defaut :\n<ul>\n<li>location = None</li>\n<li>date = None</li>\n<li>selected_col = None\nReturn the csv file to the mainpandas structure\nindex | location              | date      | keywords1       |  keywords2    | ...| keywordsn\n-----------------------------------------------------------------------------------------\n0     |        location1      |    1      |  l1-val1-1      |  l1-val2-1    | ...|  l1-valn-1\n1     |        location1      |    2      |  l1-val1-2      |  l1-val2-2    | ...|  l1-valn-2\n2     |        location1      |    3      |  l1-val1-3      |  l1-val2-3    | ...|  l1-valn-3\n...\np     |       locationp       |    1      |   lp-val1-1     |  lp-val2-1    | ...| lp-valn-1\n...</li>\n</ul></li>\n<li>location : list of location (None : all location)</li>\n<li>date : latest date to retrieve (None : max date)</li>\n<li>selected_col: column to keep according to get_available_keywords (None : all get_available_keywords)\nN.B. location column is added</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display", "modulename": "pycoa.coa.display", "kind": "module", "doc": "<p>Project : PyCoA\nDate :    april 2020 - november 2023\nAuthors : Olivier Dadoun, Julien Browaeys, Tristan Beau\nCopyright \u00a9pycoa.fr\nLicense: See joint LICENSE file</p>\n\n<p>Module : coa.display</p>\n\n<h2 id=\"about\">About :</h2>\n\n<p>An interface module to easily plot pycoa data with bokeh</p>\n"}, {"fullname": "pycoa.coa.display.width_height_default", "modulename": "pycoa.coa.display", "qualname": "width_height_default", "kind": "variable", "doc": "<p></p>\n", "default_value": "[500, 380]"}, {"fullname": "pycoa.coa.display.MAXCOUNTRIESDISPLAYED", "modulename": "pycoa.coa.display", "qualname": "MAXCOUNTRIESDISPLAYED", "kind": "variable", "doc": "<p></p>\n", "default_value": "24"}, {"fullname": "pycoa.coa.display.CocoDisplay", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.__init__", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">geo</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycoa.coa.display.CocoDisplay.database_name", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.database_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.dbld", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.dbld", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.lcolors", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.lcolors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.scolors", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.scolors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoageopandas", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoageopandas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.ax_type", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.ax_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.geom", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.geom", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.geopan", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.geopan", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.location_geometry", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.location_geometry", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.boundary_metropole", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.boundary_metropole", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.listfigs", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.listfigs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.options_stats", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.options_stats", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.options_charts", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.options_charts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.options_front", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.options_front", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.available_tiles", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.available_tiles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.available_modes", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.available_modes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.dfigure_default", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.dfigure_default", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.dvisu_default", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.dvisu_default", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.when_beg", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.when_beg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.when_end", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.when_end", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.alloptions", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.alloptions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.iso3country", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.iso3country", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.granularity", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.granularity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.namecountry", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.namecountry", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.display.CocoDisplay.standardfig", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.standardfig", "kind": "function", "doc": "<p>Create a standard Bokeh figure, with pycoa.fr copyright, used in all the bokeh charts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.get_listfigures", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.get_listfigures", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.set_listfigures", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.set_listfigures", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.decowrapper", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.decowrapper", "kind": "function", "doc": "<p>Main decorator it mainly deals with arg testings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_resume_data", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_resume_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">input_field</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.decoplot", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.decoplot", "kind": "function", "doc": "<p>decorator for plot purpose</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_plot", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_plot", "kind": "function", "doc": "<hr />\n\n<p>Create a versus plot according to arguments.\nSee help(pycoa_plot).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>input = None : if None take first element. A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element. It should be a list dim=2. Moreover the 2 variables must be present\nin the DataFrame considered.</li>\n<li>plot_heigh = width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">input_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_date_plot", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_date_plot", "kind": "function", "doc": "<hr />\n\n<p>Create a date plot according to arguments. See help(pycoa_date_plot).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>input = None : if None take first element. A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>guideline = False</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">input_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_spiral_plot", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_spiral_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">input_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_scrollingmenu", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_scrollingmenu", "kind": "function", "doc": "<hr />\n\n<p>Create a date plot, with a scrolling menu location, according to arguments.\nSee help(pycoa_scrollingmenu).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<p>len(location) &gt; 2</p>\n\n<ul>\n<li>input = None : if None take first element. A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse\n-guideline = False</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">input_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_yearly_plot", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_yearly_plot", "kind": "function", "doc": "<hr />\n\n<p>Create a date plot according to arguments. See help(pycoa_date_plot).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>input = None : if None take first element. A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>guideline = False</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">input_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.decohistomap", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.decohistomap", "kind": "function", "doc": "<p>Decorator function used for histogram and map</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_histo", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_histo", "kind": "function", "doc": "<hr />\n\n<p>Create 1D histogramme by value according to arguments.\nSee help(pycoa_histo).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>geopdwd : A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">geopdwd</span>, </span><span class=\"param\"><span class=\"n\">input_field</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.decohistopie", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.decohistopie", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_horizonhisto", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_horizonhisto", "kind": "function", "doc": "<hr />\n\n<p>Create 1D histogramme by location according to arguments.\nSee help(pycoa_histo).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>srcfiltered : A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">srcfiltered</span>, </span><span class=\"param\"><span class=\"n\">panels</span>, </span><span class=\"param\"><span class=\"n\">date_slider</span>, </span><span class=\"param\"><span class=\"n\">toggl</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.add_columns_for_pie_chart", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.add_columns_for_pie_chart", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">column_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_pie", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_pie", "kind": "function", "doc": "<hr />\n\n<p>Create a pie chart according to arguments.\nSee help(pycoa_pie).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>srcfiltered : A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">srcfiltered</span>, </span><span class=\"param\"><span class=\"n\">panels</span>, </span><span class=\"param\"><span class=\"n\">date_slider</span>, </span><span class=\"param\"><span class=\"n\">toggl</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_mapfolium", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_mapfolium", "kind": "function", "doc": "<hr />\n\n<p>Create a map folium to arguments.\nSee help(pycoa_histo).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>srcfiltered : A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">geopdwd</span>, </span><span class=\"param\"><span class=\"n\">input_field</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.decopycoageo", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.decopycoageo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoageo", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoageo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">geopdwd</span>, </span><span class=\"param\"><span class=\"n\">geopdwd_filtered</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.decomap", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.decomap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_map", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_map", "kind": "function", "doc": "<hr />\n\n<p>Create a map bokeh with arguments.\nSee help(pycoa_histo).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>srcfiltered : A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n<li>tile : tile</li>\n<li>maplabel: False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">geopdwd</span>,</span><span class=\"param\">\t<span class=\"n\">geopdwd_filtered</span>,</span><span class=\"param\">\t<span class=\"n\">sourcemaplabel</span>,</span><span class=\"param\">\t<span class=\"n\">standardfig</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.pycoa_pimpmap", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.pycoa_pimpmap", "kind": "function", "doc": "<hr />\n\n<p>Create a bokeh map with pimpline label and with to arguments.\nSee help(pycoa_histo).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<ul>\n<li>srcfiltered : A DataFrame with a Pycoa struture is mandatory\n|location|date|Variable desired|daily|cumul|weekly|codelocation|clustername|permanentdisplay|rolloverdisplay|</li>\n<li>input_field = if None take second element could be a list</li>\n<li>plot_heigh= width_height_default[1]</li>\n<li>plot_width = width_height_default[0]</li>\n<li>title = None</li>\n<li>textcopyright = default</li>\n<li>mode = mouse</li>\n<li>cursor_date = None if True\n<ul>\n<li>orientation = horizontal</li>\n</ul></li>\n<li>when : default min and max according to the inpude DataFrame.\nDates are given under the format dd/mm/yyyy.\nwhen format [dd/mm/yyyy : dd/mm/yyyy]\nif [:dd/mm/yyyy] min date up to\nif [dd/mm/yyyy:] up to max date</li>\n<li>tile : tile</li>\n<li>maplabel: False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">geopdwd</span>,</span><span class=\"param\">\t<span class=\"n\">geopdwd_filtered</span>,</span><span class=\"param\">\t<span class=\"n\">sourcemaplabel</span>,</span><span class=\"param\">\t<span class=\"n\">standardfig</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.tiles_list", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.tiles_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.convert_tile", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.convert_tile", "kind": "function", "doc": "<p>Return tiles url according to folium or bokeh resquested</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tilename</span>, </span><span class=\"param\"><span class=\"n\">which</span><span class=\"o\">=</span><span class=\"s1\">&#39;bokeh&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.dict_shorten_loc", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.dict_shorten_loc", "kind": "function", "doc": "<p>return a shorten name location</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">toshort</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.bokeh_legend", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.bokeh_legend", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bkfigure</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.min_max_range", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.min_max_range", "kind": "function", "doc": "<p>Return a cleverly rounded min and max giving raw min and raw max of data.\nUsefull for hist range and colormap</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a_min</span>, </span><span class=\"param\"><span class=\"n\">a_max</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.save_map2png", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.save_map2png", "kind": "function", "doc": "<p>Save map as png geckodriver and PIL packages are needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">map</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pngfile</span><span class=\"o\">=</span><span class=\"s1\">&#39;map.png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.save_pandas_as_png", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.save_pandas_as_png", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pngfile</span><span class=\"o\">=</span><span class=\"s1\">&#39;pandas.png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.changeto_nonan_date", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.changeto_nonan_date", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">when_end</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">field</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.changeto_nonull_date", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.changeto_nonull_date", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">when_end</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">field</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.get_utcdate", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.get_utcdate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.test_all_val_null", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.test_all_val_null", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.get_polycoords", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.get_polycoords", "kind": "function", "doc": "<p>Take a row of a geopandas as an input (i.e : for index, row in geopdwd.iterrows():...)\n    and returns a tuple (if the geometry is a Polygon) or a list (if the geometry is a multipolygon)\n    of an exterior.coords</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">geopandasrow</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.wgs84_to_web_mercator", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.wgs84_to_web_mercator", "kind": "function", "doc": "<p>Take a tuple (longitude,latitude) from a coordinate reference system crs=EPSG:4326\n and converts it to a  longitude/latitude tuple from to Web Mercator format</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tuple_xy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.rollerJS", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.rollerJS", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.sparkline", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.sparkline", "kind": "function", "doc": "<p>Returns a HTML image tag containing a base64 encoded sparkline style plot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwags</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.display.CocoDisplay.spiral", "modulename": "pycoa.coa.display", "qualname": "CocoDisplay.spiral", "kind": "function", "doc": "<p>Returns a HTML image tag containing a base64 encoded spiral style plot\n<a href=\"https://github.com/emilienschultz/researchnotebooks/blob/master/20220116%20-%20Visualisation%20polaire%20cas%20COVID-19.ipynb\">https://github.com/emilienschultz/researchnotebooks/blob/master/20220116%20-%20Visualisation%20polaire%20cas%20COVID-19.ipynb</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwags</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.error", "modulename": "pycoa.coa.error", "kind": "module", "doc": "<p>Project : PyCoA\nDate :    april 2020 - november 2023\nAuthors : Olivier Dadoun, Julien Browaeys, Tristan Beau\nCopyright \u00a9pycoa.fr\nLicense: See joint LICENSE file</p>\n\n<p>Module : coa.error</p>\n\n<h2 id=\"about\">About :</h2>\n\n<p>Main class definitions for error management within the pycoa framework.\nAll Coa exceptions should derive from the main CoaError class.</p>\n"}, {"fullname": "pycoa.coa.error.CoaError", "modulename": "pycoa.coa.error", "qualname": "CoaError", "kind": "class", "doc": "<p>Base class for exceptions in PyCoa.</p>\n", "bases": "builtins.Exception"}, {"fullname": "pycoa.coa.error.CoaError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaError.message", "modulename": "pycoa.coa.error", "qualname": "CoaError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaNoData", "modulename": "pycoa.coa.error", "qualname": "CoaNoData", "kind": "class", "doc": "<p>Exception raised when there is no data to plot or to manage (invalid cut)</p>\n", "bases": "CoaError, builtins.IndexError"}, {"fullname": "pycoa.coa.error.CoaNoData.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaNoData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaNoData.message", "modulename": "pycoa.coa.error", "qualname": "CoaNoData.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaKeyError", "modulename": "pycoa.coa.error", "qualname": "CoaKeyError", "kind": "class", "doc": "<p>Exception raised for errors in used key option.</p>\n\n<p>Attributes:\n    message -- explanation of the error</p>\n", "bases": "CoaError, builtins.KeyError"}, {"fullname": "pycoa.coa.error.CoaKeyError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaKeyError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaKeyError.message", "modulename": "pycoa.coa.error", "qualname": "CoaKeyError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaWhereError", "modulename": "pycoa.coa.error", "qualname": "CoaWhereError", "kind": "class", "doc": "<p>Exception raised for location errors.</p>\n\n<p>Attributes:\n    message -- explanation of the error</p>\n", "bases": "CoaError, builtins.IndexError"}, {"fullname": "pycoa.coa.error.CoaWhereError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaWhereError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaWhereError.message", "modulename": "pycoa.coa.error", "qualname": "CoaWhereError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaTypeError", "modulename": "pycoa.coa.error", "qualname": "CoaTypeError", "kind": "class", "doc": "<p>Exception raised for type mismatch errors.</p>\n\n<p>Attributes:\n    message -- explanation of the error</p>\n", "bases": "CoaError, builtins.TypeError"}, {"fullname": "pycoa.coa.error.CoaTypeError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaTypeError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaTypeError.message", "modulename": "pycoa.coa.error", "qualname": "CoaTypeError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaLookupError", "modulename": "pycoa.coa.error", "qualname": "CoaLookupError", "kind": "class", "doc": "<p>Exception raised for type lookup errors.</p>\n\n<p>Attributes:\n    message -- explanation of the error</p>\n", "bases": "CoaError, builtins.LookupError"}, {"fullname": "pycoa.coa.error.CoaLookupError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaLookupError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaLookupError.message", "modulename": "pycoa.coa.error", "qualname": "CoaLookupError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaNotManagedError", "modulename": "pycoa.coa.error", "qualname": "CoaNotManagedError", "kind": "class", "doc": "<p>Exception raised when the error is unknown and not managed.</p>\n\n<p>Attributes:\n    message -- explanation of the error</p>\n", "bases": "CoaError"}, {"fullname": "pycoa.coa.error.CoaNotManagedError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaNotManagedError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaNotManagedError.message", "modulename": "pycoa.coa.error", "qualname": "CoaNotManagedError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaDbError", "modulename": "pycoa.coa.error", "qualname": "CoaDbError", "kind": "class", "doc": "<p>Exception raised for database errors.</p>\n\n<p>Attributes:\n    message -- explanation of the error</p>\n", "bases": "CoaError"}, {"fullname": "pycoa.coa.error.CoaDbError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaDbError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaDbError.message", "modulename": "pycoa.coa.error", "qualname": "CoaDbError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.error.CoaConnectionError", "modulename": "pycoa.coa.error", "qualname": "CoaConnectionError", "kind": "class", "doc": "<p>Exception raised for connection errors.</p>\n\n<p>Attributes:\n    message -- explanation of the error</p>\n", "bases": "CoaError, builtins.ConnectionError"}, {"fullname": "pycoa.coa.error.CoaConnectionError.__init__", "modulename": "pycoa.coa.error", "qualname": "CoaConnectionError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "pycoa.coa.error.CoaConnectionError.message", "modulename": "pycoa.coa.error", "qualname": "CoaConnectionError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycoa.coa.front", "modulename": "pycoa.coa.front", "kind": "module", "doc": "<p>Project : PyCoA - Copyright \u00a9pycoa.fr\nDate :    april 2020 - november 2023\nAuthors : Olivier Dadoun, Julien Browaeys, Tristan Beau\nLicense: See joint LICENSE file</p>\n\n<p>Module : coa.front</p>\n\n<h2 id=\"about\">About :</h2>\n\n<p>This is the PyCoA front end functions. It provides easy access and\nuse of the whole PyCoA framework in a simplified way.\nThe use can change the database, the type of data, the output format\nwith keywords (see help of functions below).</p>\n\n<h2 id=\"basic-usage\">Basic usage</h2>\n\n<p><em>* plotting covid deaths (default value) vs. time *</em>\n    import coa.front as cf</p>\n\n<pre><code>cf.plot(where='France')  # where keyword is mandatory\n</code></pre>\n\n<p><em>* getting recovered data for some countries *</em></p>\n\n<pre><code>cf.get(where=['Spain','Italy'],which='recovered')\n</code></pre>\n\n<p><em>* listing available database and which data can be used *</em>\n    cf.listwhom()\n    cf.setwhom('jhu',reload=True) # return available keywords (aka 'which' data), reload DB is True by default\n    cf.listwhich()   # idem\n    cf.listwhat()    # return available time series type (weekly,\n                     # daily...)\n    cf.plot(option='sumall') # return the cumulative plot for all countries\n                     # for default which keyword. See cf.listwhich() and\n                    # and other cf.list**() function (see below)</p>\n"}, {"fullname": "pycoa.coa.front.getversion", "modulename": "pycoa.coa.front", "qualname": "getversion", "kind": "function", "doc": "<p>Return the current running version of pycoa.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listoutput", "modulename": "pycoa.coa.front", "qualname": "listoutput", "kind": "function", "doc": "<p>Return the list of currently available output types for the\nget() function. The first one is the default output given if\nnot specified.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listvisu", "modulename": "pycoa.coa.front", "qualname": "listvisu", "kind": "function", "doc": "<p>Return the list of currently available visualization for the\nmap() function. The first one is the default output given if\nnot specified.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listwhom", "modulename": "pycoa.coa.front", "qualname": "listwhom", "kind": "function", "doc": "<p>Return the list of currently avalailable databases for covid19\ndata in PyCoA.\nThe first one is the default one.</p>\n\n<p>If detailed=True, gives information location of each given database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">detailed</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listwhat", "modulename": "pycoa.coa.front", "qualname": "listwhat", "kind": "function", "doc": "<p>Return the list of currently avalailable type of series available.\nThe first one is the default one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listhist", "modulename": "pycoa.coa.front", "qualname": "listhist", "kind": "function", "doc": "<p>Return the list of currently avalailable type of hist available.\nThe first one is the default one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listplot", "modulename": "pycoa.coa.front", "qualname": "listplot", "kind": "function", "doc": "<p>Return the list of currently avalailable type of plots available.\nThe first one is the default one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listoption", "modulename": "pycoa.coa.front", "qualname": "listoption", "kind": "function", "doc": "<p>Return the list of currently avalailable option apply to data.\nDefault is no option.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listtile", "modulename": "pycoa.coa.front", "qualname": "listtile", "kind": "function", "doc": "<p>Return the list of currently avalailable tile option for map()\nDefault is the first one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listwhich", "modulename": "pycoa.coa.front", "qualname": "listwhich", "kind": "function", "doc": "<p>Get which are the available fields for the current base.\nOutput is a list of string.\nBy default, the listwhich()[0] is the default which field in other\nfunctions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listwhere", "modulename": "pycoa.coa.front", "qualname": "listwhere", "kind": "function", "doc": "<p>Get the list of available regions/subregions managed by the current database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clustered</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listbypop", "modulename": "pycoa.coa.front", "qualname": "listbypop", "kind": "function", "doc": "<p>Get the list of available population normalization</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.listmaplabel", "modulename": "pycoa.coa.front", "qualname": "listmaplabel", "kind": "function", "doc": "<p>Get the list of available population normalization</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.setwhom", "modulename": "pycoa.coa.front", "qualname": "setwhom", "kind": "function", "doc": "<p>Set the covid19 database used, given as a string.\nPlease see pycoa.listbase() for the available current list.</p>\n\n<p>By default, the listbase()[0] is the default base used in other\nfunctions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.getwhom", "modulename": "pycoa.coa.front", "qualname": "getwhom", "kind": "function", "doc": "<p>Return the current base which is used</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">return_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.getkeywordinfo", "modulename": "pycoa.coa.front", "qualname": "getkeywordinfo", "kind": "function", "doc": "<p>Return keyword_definition for the db selected</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">which</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.getrawdb", "modulename": "pycoa.coa.front", "qualname": "getrawdb", "kind": "function", "doc": "<p>Return the main pandas i.e with all the which values loaded from the database selected</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.normbypop", "modulename": "pycoa.coa.front", "qualname": "normbypop", "kind": "function", "doc": "<p>Return a pandas with a normalisation column add by population</p>\n\n<ul>\n<li>can normalize by '100', '1k', '100k' or '1M'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pandy</span>, </span><span class=\"param\"><span class=\"n\">val2norm</span>, </span><span class=\"param\"><span class=\"n\">bypop</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.chartsinput_deco", "modulename": "pycoa.coa.front", "qualname": "chartsinput_deco", "kind": "function", "doc": "<p>Main decorator it mainly deals with arg testings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.get", "modulename": "pycoa.coa.front", "qualname": "get", "kind": "function", "doc": "<p>Return covid19 data in specified format output (default, by list)\nfor specified locations ('where' keyword).\nThe used database is set by the setbase() function but can be\nchanged on the fly ('whom' keyword)</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<p>where  --   a single string of location, or list of (mandatory,\n            no default value)\nwhich  --   what sort of data to deliver ( 'death','confirmed',\n            'recovered' for 'jhu' default database). See listwhich() function\n            for full list according to the used database.</p>\n\n<p>what   --   which data are computed, either in standard mode\n            ('standard', default value), or 'daily' (diff with previous day\n            and 'weekly' (diff with previous week). See\n            listwhich() for fullist of available\n            Full list of what keyword with the listwhat() function.</p>\n\n<p>whom   --   Database specification (overload the setbase()\n            function). See listwhom() for supported list</p>\n\n<p>when   --   dates are given under the format dd/mm/yyyy. In the when\n            option, one can give one date which will be the end of\n            the data slice. Or one can give two dates separated with\n            \":\", which will define the time cut for the output data\n            btw those two dates.</p>\n\n<p>output --   output format returned ( pandas (default), array (numpy.array),\n            dict or list). See listoutput() function.</p>\n\n<p>option --   pre-computing option.\n            * nonneg means that negative daily balance is pushed back\n            to previousdays in order to have a cumulative function which is\n            monotonous increasing.\n            * nofillnan means that nan value won't be filled.\n            * smooth7 will perform a 7 day window average of data\n            * sumall will return integrated over locations given via the\n            where keyword. If using double bracket notation, the sumall\n            option is applied for each bracketed member of the where arg.</p>\n\n<pre><code>        By default : no option.\n        See listoption().\n</code></pre>\n\n<p>bypop --    normalize by population (if available for the selected database).\n            * by default, 'no' normalization\n            * can normalize by '100', '1k', '100k' or '1M'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.saveoutput", "modulename": "pycoa.coa.front", "qualname": "saveoutput", "kind": "function", "doc": "<p>Export pycoas pandas as an output file selected by output argument\n'pandas': pandas to save\n'saveformat': excel (default) or csv\n'savename': None (default pycoaout+ '.xlsx/.csv')</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.merger", "modulename": "pycoa.coa.front", "qualname": "merger", "kind": "function", "doc": "<p>Merge two or more pycoa pandas from get_stats operation\n'coapandas': list (min 2D) of pandas from stats\n'whichcol': list variable associate to the coapandas list to be retrieve</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.decomap", "modulename": "pycoa.coa.front", "qualname": "decomap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.figuremap", "modulename": "pycoa.coa.front", "qualname": "figuremap", "kind": "function", "doc": "<p>Create a map according to arguments and options.\nSee help(map).</p>\n\n<ul>\n<li>2 types of visu are avalailable so far : bokeh or folium (see listvisu())\nby default visu='bokeh'</li>\n<li>In the default case (i.e visu='bokeh') available option are :\n<ul>\n<li>dateslider=True: a date slider is called and displayed on the right part of the map</li>\n<li>maplabel = text, values are displayed directly on the map\n= textinter, values as an integer are displayed directly on the map\n= spark, sparkline are displayed directly on the map\n= spiral, spiral are displayed directly on the map\n= label%, label are in %\n= exploded/dense, when available exploded/dense map geometry (for USA &amp; FRA sor far)</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.map", "modulename": "pycoa.coa.front", "qualname": "map", "kind": "function", "doc": "<p>Create a map according to arguments and options.\nSee help(map).</p>\n\n<ul>\n<li>2 types of visu are avalailable so far : bokeh or folium (see listvisu())\nby default visu='bokeh'</li>\n<li>In the default case (i.e visu='bokeh') available option are :\n<ul>\n<li>dateslider=True: a date slider is called and displayed on the right part of the map</li>\n<li>maplabel = text, values are displayed directly on the map\n= textinter, values as an integer are displayed directly on the map\n= spark, sparkline are displayed directly on the map\n= spiral, spiral are displayed directly on the map\n= label%, label are in %\n= exploded/dense, when available exploded/dense map geometry (for USA &amp; FRA sor far)</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.decohist", "modulename": "pycoa.coa.front", "qualname": "decohist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.figurehist", "modulename": "pycoa.coa.front", "qualname": "figurehist", "kind": "function", "doc": "<p>Create histogram according to arguments.\nSee help(hist).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<p>where (mandatory if no input), what, which, whom, when : (see help(get))</p>\n\n<p>input       --  input data to plot within the pycoa framework (e.g.\n                after some analysis or filtering). Default is None which\n                means that we use the basic raw data through the get\n                function.\n                When the 'input' keyword is set, where, what, which,\n                whom when keywords are ignored.\n                input should be given as valid pycoa pandas dataframe.</p>\n\n<p>input_field --  is the name of the field of the input pandas to plot.\n                Default is 'deaths/standard', the default output field of\n                the get() function.</p>\n\n<p>width_height : width and height of the picture .\n            If specified should be a list of width and height.\n            For instance width_height=[400,500]</p>\n\n<p>typeofhist  --  'bylocation' (default), 'byvalue' or pie</p>\n\n<p>bins        --  number of bins used, only available for 'byvalue' type of\n                histograms.\n                If none provided, a default value will be used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.hist", "modulename": "pycoa.coa.front", "qualname": "hist", "kind": "function", "doc": "<p>Create histogram according to arguments.\nSee help(hist).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<p>where (mandatory if no input), what, which, whom, when : (see help(get))</p>\n\n<p>input       --  input data to plot within the pycoa framework (e.g.\n                after some analysis or filtering). Default is None which\n                means that we use the basic raw data through the get\n                function.\n                When the 'input' keyword is set, where, what, which,\n                whom when keywords are ignored.\n                input should be given as valid pycoa pandas dataframe.</p>\n\n<p>input_field --  is the name of the field of the input pandas to plot.\n                Default is 'deaths/standard', the default output field of\n                the get() function.</p>\n\n<p>width_height : width and height of the picture .\n            If specified should be a list of width and height.\n            For instance width_height=[400,500]</p>\n\n<p>typeofhist  --  'bylocation' (default), 'byvalue' or pie</p>\n\n<p>bins        --  number of bins used, only available for 'byvalue' type of\n                histograms.\n                If none provided, a default value will be used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.decoplot", "modulename": "pycoa.coa.front", "qualname": "decoplot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.figureplot", "modulename": "pycoa.coa.front", "qualname": "figureplot", "kind": "function", "doc": "<p>Create a date plot according to arguments. See help(plot).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<p>where (mandatory), what, which, whom, when : (see help(get))</p>\n\n<p>input       --  input data to plot within the pycoa framework (e.g.\n                after some analysis or filtering). Default is None which\n                means that we use the basic raw data through the get\n                function.\n                When the 'input' keyword is set, where, what, which,\n                whom when keywords are ignored.\n                input should be given as valid pycoa pandas dataframe.</p>\n\n<p>input_field --  is the name of the field of the input pandas to plot.\n                Default is 'deaths/standard', the default output field of\n                the get() function.</p>\n\n<p>width_height : width and height of the picture .\n            If specified should be a list of width and height. For instance width_height=[400,500]</p>\n\n<p>title       --  to force the title of the plot</p>\n\n<p>textcopyright - to force the copyright lower left of the graph</p>\n\n<p>typeofplot  -- 'date' (default), 'menulocation' or 'versus'\n               'date':date plot\n               'spiral': spiral plot if several location only the first one\n               'menulocation': date plot with two scroll menu locations.\n                                Usefull to study the behaviour of a variable for two different countries.\n               'versus': plot variable against an other one.\n                         For this type of plot one should used 'input' and 'input_field' (not fully tested).\n                         Moreover dim(input_field) must be 2.\n                'spiral' : plot variable as a spiral angular plot, angle being the date\n                'yearly' : same as date but modulo 1 year</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.front.plot", "modulename": "pycoa.coa.front", "qualname": "plot", "kind": "function", "doc": "<p>Create a date plot according to arguments. See help(plot).</p>\n\n<h2 id=\"keyword-arguments\">Keyword arguments</h2>\n\n<p>where (mandatory), what, which, whom, when : (see help(get))</p>\n\n<p>input       --  input data to plot within the pycoa framework (e.g.\n                after some analysis or filtering). Default is None which\n                means that we use the basic raw data through the get\n                function.\n                When the 'input' keyword is set, where, what, which,\n                whom when keywords are ignored.\n                input should be given as valid pycoa pandas dataframe.</p>\n\n<p>input_field --  is the name of the field of the input pandas to plot.\n                Default is 'deaths/standard', the default output field of\n                the get() function.</p>\n\n<p>width_height : width and height of the picture .\n            If specified should be a list of width and height. For instance width_height=[400,500]</p>\n\n<p>title       --  to force the title of the plot</p>\n\n<p>textcopyright - to force the copyright lower left of the graph</p>\n\n<p>typeofplot  -- 'date' (default), 'menulocation' or 'versus'\n               'date':date plot\n               'spiral': spiral plot if several location only the first one\n               'menulocation': date plot with two scroll menu locations.\n                                Usefull to study the behaviour of a variable for two different countries.\n               'versus': plot variable against an other one.\n                         For this type of plot one should used 'input' and 'input_field' (not fully tested).\n                         Moreover dim(input_field) must be 2.\n                'spiral' : plot variable as a spiral angular plot, angle being the date\n                'yearly' : same as date but modulo 1 year</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo", "modulename": "pycoa.coa.geo", "kind": "module", "doc": "<p>Project : PyCoA\nDate :    april 2020 - november 2023\nAuthors : Olivier Dadoun, Julien Browaeys, Tristan Beau\nCopyright \u00a9pycoa.fr\nLicense: See joint LICENSE file</p>\n\n<p>Module : coa.geo</p>\n\n<h2 id=\"about\">About :</h2>\n\n<p>Geo classes within the PyCoA framework.</p>\n\n<p>GeoManager class provides translations between naming normalisations\nof countries. It's based on the pycountry module.</p>\n\n<p>GeoInfo class allow to add new fields to a pandas DataFrame about\nstatistical information for countries.</p>\n\n<p>GeoRegion class helps returning list of countries in a specified region</p>\n\n<p>GeoCountry manages information for a single country.</p>\n"}, {"fullname": "pycoa.coa.geo.GeoManager", "modulename": "pycoa.coa.geo", "qualname": "GeoManager", "kind": "class", "doc": "<p>GeoManager class definition. No inheritance from any other class.</p>\n\n<p>It should raise only CoaError and derived exceptions in case\nof errors (see pycoa.error)</p>\n"}, {"fullname": "pycoa.coa.geo.GeoManager.__init__", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.__init__", "kind": "function", "doc": "<p>__init__ member function, with default definition of\nthe used standard. To get the current default standard,\nsee get_list_standard()[0].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">standard</span><span class=\"o\">=</span><span class=\"s1\">&#39;iso2&#39;</span></span>)</span>"}, {"fullname": "pycoa.coa.geo.GeoManager.get_GeoRegion", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.get_GeoRegion", "kind": "function", "doc": "<p>return the GeoRegion local instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.get_region_list", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.get_region_list", "kind": "function", "doc": "<p>return the list of region via the GeoRegion instance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.get_list_standard", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.get_list_standard", "kind": "function", "doc": "<p>return the list of supported standard name of countries.\nFirst one is default for the class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.get_list_output", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.get_list_output", "kind": "function", "doc": "<p>return supported list of output type. First one is default\nfor the class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.get_list_db", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.get_list_db", "kind": "function", "doc": "<p>return supported list of database name for translation of\ncountry names to standard.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.get_standard", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.get_standard", "kind": "function", "doc": "<p>return current standard use within the GeoManager class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.set_standard", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.set_standard", "kind": "function", "doc": "<p>set the working standard type within the GeoManager class.\nThe standard should meet the get_list_standard() requirement</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">standard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.to_standard", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.to_standard", "kind": "function", "doc": "<p>Given a list of string of locations (countries), returns a\nnormalised list according to the used standard (defined\nvia the setStandard() or __init__ function. Current default is iso2.</p>\n\n<h2 id=\"arguments\">Arguments</h2>\n\n<p>first arg        --  w, list of string of locations (or single string)\n                     to convert to standard one</p>\n\n<p>output           -- 'list' (default), 'dict' or 'pandas'\ndb               -- database name to help conversion.\n                    Default : None, meaning best effort to convert.\n                    Known database : jhu, wordometer...\n                    See get_list_db() for full list of known db for\n                    standardization\ninterpret_region -- Boolean, default=False. If yes, the output should\n                    be only 'list'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoManager.first_db_translation", "modulename": "pycoa.coa.geo", "qualname": "GeoManager.first_db_translation", "kind": "function", "doc": "<p>This function helps to translate from country name to\nstandard for specific databases. It's the first step\nbefore final translation.</p>\n\n<p>One can easily add some database support adding some new rules\nfor specific databases</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">db</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoInfo", "modulename": "pycoa.coa.geo", "qualname": "GeoInfo", "kind": "class", "doc": "<p>GeoInfo class definition. No inheritance from any other class.</p>\n\n<p>It should raise only CoaError and derived exceptions in case\nof errors (see pycoa.error)</p>\n"}, {"fullname": "pycoa.coa.geo.GeoInfo.__init__", "modulename": "pycoa.coa.geo", "qualname": "GeoInfo.__init__", "kind": "function", "doc": "<p>__init__ member function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gm</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "pycoa.coa.geo.GeoInfo.get_GeoManager", "modulename": "pycoa.coa.geo", "qualname": "GeoInfo.get_GeoManager", "kind": "function", "doc": "<p>return the local instance of used GeoManager()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoInfo.get_list_field", "modulename": "pycoa.coa.geo", "qualname": "GeoInfo.get_list_field", "kind": "function", "doc": "<p>return the list of supported additionnal fields available</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoInfo.get_source", "modulename": "pycoa.coa.geo", "qualname": "GeoInfo.get_source", "kind": "function", "doc": "<p>return the source of the information provided for a given\nfield.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">field</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoInfo.add_field", "modulename": "pycoa.coa.geo", "qualname": "GeoInfo.add_field", "kind": "function", "doc": "<p>this is the main function of the GeoInfo class. It adds to\nthe input pandas dataframe some fields according to\nthe geofield field of input.\nThe return value is the pandas dataframe.</p>\n\n<p>Arguments :\nfield    -- should be given as a string of list of strings and\n            should be valid fields (see get_list_field() )\n            Mandatory.\ninput    -- provide the input pandas dataframe. Mandatory.\ngeofield -- provide the field name in the pandas where the\n            location is stored. Default : 'where'\noverload -- Allow to overload a field. Boolean value.\n            Default : False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoRegion", "modulename": "pycoa.coa.geo", "qualname": "GeoRegion", "kind": "class", "doc": "<p>GeoRegion class definition. Does not inheritate from any other\nclass.</p>\n\n<p>It should raise only CoaError and derived exceptions in case\nof errors (see pycoa.error)</p>\n"}, {"fullname": "pycoa.coa.geo.GeoRegion.__init__", "modulename": "pycoa.coa.geo", "qualname": "GeoRegion.__init__", "kind": "function", "doc": "<p>__init__ member function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycoa.coa.geo.GeoRegion.get_source", "modulename": "pycoa.coa.geo", "qualname": "GeoRegion.get_source", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoRegion.get_region_list", "modulename": "pycoa.coa.geo", "qualname": "GeoRegion.get_region_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoRegion.is_region", "modulename": "pycoa.coa.geo", "qualname": "GeoRegion.is_region", "kind": "function", "doc": "<p>it returns either False or the correctly named region name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">region</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoRegion.get_countries_from_region", "modulename": "pycoa.coa.geo", "qualname": "GeoRegion.get_countries_from_region", "kind": "function", "doc": "<p>it returns a list of countries for the given region name.\nThe standard used is iso3. To convert to another standard,\nuse the GeoManager class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">region</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoRegion.get_pandas", "modulename": "pycoa.coa.geo", "qualname": "GeoRegion.get_pandas", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry", "kind": "class", "doc": "<p>GeoCountry class definition.\nThis class provides functions for specific countries and their states / departments / regions,\nand their geo properties (geometry, population if available, etc.)</p>\n\n<p>The list of supported countries is given by get_list_countries() function.</p>\n"}, {"fullname": "pycoa.coa.geo.GeoCountry.__init__", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.__init__", "kind": "function", "doc": "<p>__init__ member function.\nMust give as arg the country to deal with, as a valid ISO3 string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">country</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycoa.coa.geo.GeoCountry.set_dense_geometry", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.set_dense_geometry", "kind": "function", "doc": "<p>If used, we're using for the current country a dense geometry forsubregions\nand regions.\nIt's not possible to go back.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.set_exploded_geometry", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.set_exploded_geometry", "kind": "function", "doc": "<p>If used, we're using for the current country a dense geometry forsubregions\nand regions.\nMoreover we're exploding internal dense geometry for some countries (currently IdF\nfor France, only).</p>\n\n<p>It's not possible to go back.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.set_main_geometry", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.set_main_geometry", "kind": "function", "doc": "<p>If used, we're using only for the current country the main\ngeometry for subregions and regions.\nIt's not possible to go back.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.is_dense_geometry", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.is_dense_geometry", "kind": "function", "doc": "<p>Return the self._is_dense_geometry variable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.is_exploded_geometry", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.is_exploded_geometry", "kind": "function", "doc": "<p>Return the self._is_exploded_geometry variable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.is_main_geometry", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.is_main_geometry", "kind": "function", "doc": "<p>Return the self._is_main_geometry variable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_source", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_source", "kind": "function", "doc": "<p>Return informations about URL sources</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_country", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_country", "kind": "function", "doc": "<p>Return the current country used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_list_countries", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_list_countries", "kind": "function", "doc": "<p>This function returns back the list of supported countries</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.is_init", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.is_init", "kind": "function", "doc": "<p>Test if the country is initialized. Return True if it is. False if not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.test_is_init", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.test_is_init", "kind": "function", "doc": "<p>Test if the country is initialized. If not, raise a CoaDbError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_region_list", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_region_list", "kind": "function", "doc": "<p>Return the list of available regions with code, name and geometry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.is_region", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.is_region", "kind": "function", "doc": "<p>Return False if r is a not a known region, return the correctly capitalized name if ok</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_subregion_list", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_subregion_list", "kind": "function", "doc": "<p>Return the list of available subregions with code, name and geometry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.is_subregion", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.is_subregion", "kind": "function", "doc": "<p>Return False if r is a not a known region, return the correctly capitalized name if ok</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_subregions_from_region", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_subregions_from_region", "kind": "function", "doc": "<p>Return the list of subregions within a specified region.\nShould give either the code or the name of the region as strings in kwarg : code=# or name=#\nOutput default is 'code' of subregions. Can be changed with output='name'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_subregions_from_list_of_region_names", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_subregions_from_list_of_region_names", "kind": "function", "doc": "<p>Return the list of subregions according to list of region names given.\nThe output argument ('code' as default) is given to the get_subregions_from_region function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;code&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_regions_from_subregion", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_regions_from_subregion", "kind": "function", "doc": "<p>Return the list of regions where the subregion, given by a code, is.\nOutput default is 'code' of subregions. Can be changer with output='name'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">code</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;code&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_regions_from_list_of_subregion_codes", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_regions_from_list_of_subregion_codes", "kind": "function", "doc": "<p>Return the list of regions according to list of subregion names given.\nThe output argument ('code' as default) is given to the get_regions_from_subregion function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">&#39;code&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_regions_from_macroregion", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_regions_from_macroregion", "kind": "function", "doc": "<p>Return the list of regions included in another macroregion\nCan provide input as code= or name=\nCan provide output as 'name' or 'code' (default).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_list_properties", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_list_properties", "kind": "function", "doc": "<p>Return the list of available properties for the current country</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.get_data", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.get_data", "kind": "function", "doc": "<p>Return the whole geopandas data.\nIf region_version = True (not default), the pandas output is region based focalized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">region_version</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.geo.GeoCountry.add_field", "modulename": "pycoa.coa.geo", "qualname": "GeoCountry.add_field", "kind": "function", "doc": "<p>Return a the data pandas.Dataframe with an additionnal column with property prop.</p>\n\n<p>Arguments :\ninput        : pandas.Dataframe object. Mandatory.\nfield        : field of properties to add. Should be within the get_list_prop() list. Mandatory.\ninput_key    : input geo key of the input pandas dataframe. Default  'where'\ngeofield     : internal geo field to make the merge. Default 'code_subregion'\nregion_merging : Boolean value. Default False, except if the geofield contains '_region'.\n               If True, the merge between input dans GeoCountry data is done within the\n               region version of the data, not the subregion data which is the default\n               behavious.\noverload   : Allow to overload a field. Boolean value. Default : False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools", "modulename": "pycoa.coa.tools", "kind": "module", "doc": "<p>Project : PyCoA - Copyright \u00a9pycoa.fr\nDate :    april 2020 - november 2023\nAuthors : Olivier Dadoun, Julien Browaeys, Tristan Beau\nLicense: See joint LICENSE file</p>\n\n<p>Module : coa.tools</p>\n\n<h2 id=\"about\">About</h2>\n\n<p>This is the PyCoA tools module to be considered as a swiss knife list of functions.\nOne find function for</p>\n\n<ul>\n<li>verbose or warning mode management.</li>\n<li>kwargs analysis</li>\n<li>filling nan values of given pandas</li>\n<li>date parsing validation</li>\n<li>automatic file caching system</li>\n</ul>\n\n<p>The _verbose_mode variable should be set to 0 if no printing output needed. The\ndefault value is 1 (print information to stdout). The 2 value grants a debug level information\nprinting.</p>\n"}, {"fullname": "pycoa.coa.tools.get_verbose_mode", "modulename": "pycoa.coa.tools", "qualname": "get_verbose_mode", "kind": "function", "doc": "<p>Return the verbose mode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.set_verbose_mode", "modulename": "pycoa.coa.tools", "qualname": "set_verbose_mode", "kind": "function", "doc": "<p>Set the verbose mode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.info", "modulename": "pycoa.coa.tools", "qualname": "info", "kind": "function", "doc": "<p>Print to stdout with similar args as the builtin print function,\nif _verbose_mode &gt; 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.verb", "modulename": "pycoa.coa.tools", "qualname": "verb", "kind": "function", "doc": "<p>Print to stdout with similar args as the builtin print function,\nif _verbose_mode &gt; 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.kwargs_test", "modulename": "pycoa.coa.tools", "qualname": "kwargs_test", "kind": "function", "doc": "<p>Test that the list of kwargs is compatible with expected args. If not\nit raises a CoaKeyError with error_string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">given_args</span>, </span><span class=\"param\"><span class=\"n\">expected_args</span>, </span><span class=\"param\"><span class=\"n\">error_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.tostdstring", "modulename": "pycoa.coa.tools", "qualname": "tostdstring", "kind": "function", "doc": "<p>Standardization of string for country,region or subregion tests</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.fill_missing_dates", "modulename": "pycoa.coa.tools", "qualname": "fill_missing_dates", "kind": "function", "doc": "<p>Filling the input pandas dataframe p with missing dates</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p</span>, </span><span class=\"param\"><span class=\"n\">date_field</span><span class=\"o\">=</span><span class=\"s1\">&#39;date&#39;</span>, </span><span class=\"param\"><span class=\"n\">loc_field</span><span class=\"o\">=</span><span class=\"s1\">&#39;where&#39;</span>, </span><span class=\"param\"><span class=\"n\">d1</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.check_valid_date", "modulename": "pycoa.coa.tools", "qualname": "check_valid_date", "kind": "function", "doc": "<p>Check if a string is compatible with a valid date under the format day/month/year\nwith 2 digits for day, 2 digits for month and 4 digits for year.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.extract_dates", "modulename": "pycoa.coa.tools", "qualname": "extract_dates", "kind": "function", "doc": "<p>Expecting None or 1 or 2 dates separated by :. The format is a string.\nIf 2 dates are given, they must be ordered.\nWhen 1 date is given, assume that's the latest which is given.\nWhen None date is give, the oldest date is 01/01/0001, the newest is now.</p>\n\n<p>It returns 2 datetime object. If nothing given, the oldest date is 01/01/0001,</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">when</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.week_to_date", "modulename": "pycoa.coa.tools", "qualname": "week_to_date", "kind": "function", "doc": "<p>convert week to date.\n2 cases:</p>\n\n<ul>\n<li>Rolling week\nif format is Y-M-D-Y-M-D: return middle dates</li>\n<li>One week data Wnumber: return monday correction to the week number</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">whenstr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.get_local_from_url", "modulename": "pycoa.coa.tools", "qualname": "get_local_from_url", "kind": "function", "doc": "<p>\"Download data from the given url and store it into a local file.</p>\n\n<p>If the expiration time is 0 (default), the data will never be downloaded anymore if available.\nIf the expiration time is &lt; 0, it forces to download the file.\nIf the expiration time (in seconds) is lower than time difference between now and last modification\ntime of the file, the file is downloaded.</p>\n\n<p>One may add a suffix to the local filename if known.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">expiration_time</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.testsublist", "modulename": "pycoa.coa.tools", "qualname": "testsublist", "kind": "function", "doc": "<p>test if lst1 is in lst2 list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst1</span>, </span><span class=\"param\"><span class=\"n\">lst2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.flat_list", "modulename": "pycoa.coa.tools", "qualname": "flat_list", "kind": "function", "doc": "<p>Flatten list function used in covid19 methods</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matrix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.return_nonan_dates_pandas", "modulename": "pycoa.coa.tools", "qualname": "return_nonan_dates_pandas", "kind": "function", "doc": "<p>Check if for last date all values are nan, if yes check previous date and loop until false</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">field</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycoa.coa.tools.dotdict", "modulename": "pycoa.coa.tools", "qualname": "dotdict", "kind": "class", "doc": "<p>dot.notation access to dictionary attributes</p>\n", "bases": "builtins.dict"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();